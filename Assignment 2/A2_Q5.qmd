---
title: "Question 5"
format: html
---

```{r, warning=FALSE, message=FALSE}

library(parallel)
library(doParallel)
library(foreach)
library(iterators)
library(bench)  # Using bench instead of microbenchmark

# Set seed for reproducibility
set.seed(1234)

# Number of cores for parallel processing
num_cores <- detectCores() - 1
cl <- makeCluster(num_cores)
registerDoParallel(cl)

# Define the function to generate random numbers and find max
max_finder <- function(size) {
  max(rnorm(size))
}

# Parameters
n <- 3   # Number of vectors
size <- 5  # Length of each vector

# Export variables to cluster
clusterExport(cl, varlist = c("max_finder", "size"))

# Benchmark different methods
benchmark_results <- bench::mark(
  parLapply = {
    parLapply(cl, 1:n, function(i) max_finder(size))
  },
  foreach = {
    foreach(i = 1:n, .combine = c, .export = "size") %dopar% {
      max_finder(size)
    }
  },
  replicate = {
    replicate(n, max_finder(size))
  },
  iterations = 100,  # Repeat for accuracy
  check = FALSE  # Allow different results
)

# Stop the cluster
stopCluster(cl)

# Print results
print(benchmark_results)

```
