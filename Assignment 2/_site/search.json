[
  {
    "objectID": "A2_Q1.html",
    "href": "A2_Q1.html",
    "title": "Question 1",
    "section": "",
    "text": "library(foreach)\nlibrary(doParallel)  # For parallel computing (optional)\n\n# Register parallel backend (optional for speed)\ncl &lt;- makeCluster(detectCores() - 1)  # Use available cores minus one\nregisterDoParallel(cl)\n\n# Set parameters\nn &lt;- 100  # Sample size\nnum_reps &lt;- 100  # Number of repetitions\n\n# Run the simulation using foreach\nresults &lt;- foreach(i = 1:num_reps, .combine = rbind) %dopar% {\n  sample_data &lt;- rexp(n, rate = 1)  # Generate random sample (mean = 1, rate = 1)\n  mean_value &lt;- mean(sample_data)  # Compute sample mean\n  var_value &lt;- var(sample_data)  # Compute sample variance\n  c(mean_value, var_value)  # Return results as a vector\n}\n\n# Stop the parallel cluster\nstopCluster(cl)\n\n# Convert results to a data frame\nresults_df &lt;- as.data.frame(results)\ncolnames(results_df) &lt;- c(\"Mean\", \"Variance\")\n\nprint(results_df)\n\n                Mean  Variance\nresult.1   0.9612042 0.9594884\nresult.2   0.9615537 0.9293404\nresult.3   0.9198921 0.8673551\nresult.4   0.9757500 0.9327405\nresult.5   0.8755243 0.7587205\nresult.6   0.8172221 0.5125860\nresult.7   0.8814824 0.7519167\nresult.8   0.9554017 0.9199085\nresult.9   1.0602324 0.9944048\nresult.10  0.8560603 0.7123709\nresult.11  1.0597792 0.8373112\nresult.12  0.9802789 1.1417183\nresult.13  0.8932915 0.7107498\nresult.14  0.9493232 0.9725343\nresult.15  1.2478527 1.4608095\nresult.16  0.9661280 0.8526601\nresult.17  1.0065820 1.2719195\nresult.18  0.9992532 1.0078219\nresult.19  1.0053778 0.7515036\nresult.20  1.0360150 1.6397898\nresult.21  0.9446136 0.8322017\nresult.22  1.0656578 1.2230594\nresult.23  0.8070283 0.7922756\nresult.24  1.1086807 1.0899640\nresult.25  1.0321979 1.2222286\nresult.26  1.0839638 1.2068739\nresult.27  1.0037463 1.3662887\nresult.28  0.9873794 1.0224691\nresult.29  0.9239527 0.7779715\nresult.30  1.0879179 1.1322890\nresult.31  0.9510614 0.7072990\nresult.32  1.0046839 1.2814747\nresult.33  1.0028416 1.1331186\nresult.34  1.0219898 1.1074680\nresult.35  1.2013184 1.6943344\nresult.36  0.9383009 0.9518306\nresult.37  0.9841594 0.9800165\nresult.38  0.9194831 0.9948857\nresult.39  0.9419981 0.7755908\nresult.40  0.8821256 0.7466489\nresult.41  0.8889299 0.7289561\nresult.42  1.0498458 0.8290988\nresult.43  0.9524017 0.8766701\nresult.44  1.1738793 0.9509938\nresult.45  0.9372160 0.6061841\nresult.46  1.0746673 1.0567581\nresult.47  0.8734154 1.0554500\nresult.48  0.9983400 1.1149525\nresult.49  0.9287761 0.8538065\nresult.50  0.9692827 0.8811431\nresult.51  1.0376702 1.0134880\nresult.52  0.9820545 0.8739651\nresult.53  1.0165112 0.8553044\nresult.54  0.9956219 1.0441159\nresult.55  0.9101846 0.8226702\nresult.56  0.9171555 0.9456718\nresult.57  0.8888892 0.5697021\nresult.58  0.9556831 0.6685417\nresult.59  0.9143202 0.6724585\nresult.60  1.0451803 1.1608889\nresult.61  0.9375108 1.4124795\nresult.62  0.8775826 0.8769869\nresult.63  1.0240547 0.8708812\nresult.64  1.0345160 0.7962334\nresult.65  1.1075407 1.2183867\nresult.66  1.1054633 1.2141768\nresult.67  0.9959681 0.9298639\nresult.68  0.9853695 0.8154674\nresult.69  0.9934023 0.8726899\nresult.70  1.0133769 0.8171821\nresult.71  1.0674243 1.0664797\nresult.72  1.0431224 0.9990336\nresult.73  0.9804615 1.1873820\nresult.74  0.9659615 0.8441565\nresult.75  1.0229066 1.0882867\nresult.76  1.0362160 1.0781475\nresult.77  1.1175122 1.2041353\nresult.78  0.9545197 0.9369768\nresult.79  1.1497559 1.3111474\nresult.80  0.8596756 0.7856924\nresult.81  1.3006333 2.1947540\nresult.82  1.0715638 0.8728679\nresult.83  0.8068901 0.6212107\nresult.84  0.9491872 0.6603105\nresult.85  1.0685584 0.7437243\nresult.86  1.2510810 1.4843621\nresult.87  1.1375492 1.8947101\nresult.88  0.9377290 0.8194536\nresult.89  0.8767218 0.6723423\nresult.90  1.1650412 1.5621484\nresult.91  1.0323984 1.2193313\nresult.92  0.9119094 0.6301498\nresult.93  0.9722674 0.7862096\nresult.94  0.9696840 1.0945745\nresult.95  1.1450739 1.8374880\nresult.96  0.8094002 0.4731698\nresult.97  1.0445225 1.1042314\nresult.98  1.0323722 0.8569680\nresult.99  1.0504514 1.0537388\nresult.100 1.0085013 0.9514875"
  },
  {
    "objectID": "A2_Q1.html#question-1",
    "href": "A2_Q1.html#question-1",
    "title": "Question 1",
    "section": "",
    "text": "library(foreach)\n\nWarning: package 'foreach' was built under R version 4.2.3\n\nlibrary(doParallel)  # For parallel computing (optional)\n\nWarning: package 'doParallel' was built under R version 4.2.3\n\n\nLoading required package: iterators\n\n\nWarning: package 'iterators' was built under R version 4.2.3\n\n\nLoading required package: parallel\n\n# Register parallel backend (optional for speed)\ncl &lt;- makeCluster(detectCores() - 1)  # Use available cores minus one\nregisterDoParallel(cl)\n\n# Set parameters\nn &lt;- 100  # Sample size\nnum_reps &lt;- 100  # Number of repetitions\n\n# Run the simulation using foreach\nresults &lt;- foreach(i = 1:num_reps, .combine = rbind) %dopar% {\n  sample_data &lt;- rexp(n, rate = 1)  # Generate random sample (mean = 1, rate = 1)\n  mean_value &lt;- mean(sample_data)  # Compute sample mean\n  var_value &lt;- var(sample_data)  # Compute sample variance\n  c(mean_value, var_value)  # Return results as a vector\n}\n\n# Stop the parallel cluster\nstopCluster(cl)\n\n# Convert results to a data frame\nresults_df &lt;- as.data.frame(results)\ncolnames(results_df) &lt;- c(\"Mean\", \"Variance\")\n\n# Display the first few rows\nhead(results_df)\n\n              Mean  Variance\nresult.1 0.7833024 0.7436792\nresult.2 0.9315700 0.6074639\nresult.3 1.0452235 0.7330314\nresult.4 1.0547332 1.0676619\nresult.5 0.9241904 0.6234280\nresult.6 0.8228495 0.5029866"
  },
  {
    "objectID": "A2_Q2.html",
    "href": "A2_Q2.html",
    "title": "Question 2",
    "section": "",
    "text": "library(MASS)  # Contains the galaxies dataset\nlibrary(foreach)\nlibrary(doParallel)\n\n# Set up parallel backend\nnum_cores &lt;- detectCores() - 1  # Use available cores minus one\ncl &lt;- makeCluster(num_cores)  # Create cluster\nregisterDoParallel(cl)  # Register cluster for parallel computing\n\n# Define bootstrap function\nbootstrap_median &lt;- function(data, B) {\n  n &lt;- length(data)\n  foreach(i = 1:B, .combine = c, .packages = \"MASS\") %dopar% {\n    sample_data &lt;- sample(data, size = n, replace = TRUE)  # Bootstrap sample\n    median(sample_data)  # Compute median\n  }\n}\n\n# Load dataset\ndata &lt;- galaxies\n\n# Number of bootstrap samples\nB &lt;- 10000  # Adjust this value to experiment with runtime\n\n# Measure parallel execution time\nsystem.time({\n  parallel_results &lt;- bootstrap_median(data, B)\n})\n\n   user  system elapsed \n   2.54    0.56    3.22 \n\n# Stop the parallel cluster\nstopCluster(cl)\n\n# Measure serial execution time\nsystem.time({\n  serial_results &lt;- replicate(B, median(sample(data, size = length(data), replace = TRUE)))\n})\n\n   user  system elapsed \n   0.48    0.05    0.55 \n\n\nParallel computing is not always faster, especially when overhead costs (data transfer, communication, thread creation) dominate over the computational workload.\n\nFindings:\n\nSmall Iterations (One Bootstrap at a Time): The parallel version was sometimes slower due to high overhead relative to computation time. Serial processing could be just as fast or even faster for small iterations.\nBatch Processing (Larger Chunks at a Time): When we bootstrapped 1000 samples per iteration, parallel computing became significantly faster. Reducing the number of tasks made parallelization more efficient."
  },
  {
    "objectID": "A2_Q2.html#quarto",
    "href": "A2_Q2.html#quarto",
    "title": "Question 2",
    "section": "",
    "text": "Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see https://quarto.org."
  },
  {
    "objectID": "A2_Q2.html#running-code",
    "href": "A2_Q2.html#running-code",
    "title": "Question 2",
    "section": "Running Code",
    "text": "Running Code\nWhen you click the Render button a document will be generated that includes both content and the output of embedded code. You can embed code like this:\n\n1 + 1\n\n[1] 2\n\n\nYou can add options to executable code like this\n\n\n[1] 4\n\n\nThe echo: false option disables the printing of code (only output is displayed)."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Home page",
    "section": "",
    "text": "This site contains my Parallel Computing prac answers. Feel free to navigate through the site using the navigation panel above.\nAlso, my link to Github: https://github.com/Shri-yaa/GitHub or you can click here"
  },
  {
    "objectID": "index.html#prac-answers",
    "href": "index.html#prac-answers",
    "title": "Home page",
    "section": "",
    "text": "This site contains my Parallel Computing prac answers. Feel free to navigate through the site using the navigation panel above.\nAlso, my link to Github: https://github.com/Shri-yaa/GitHub or you can click here"
  },
  {
    "objectID": "A2_Q5.html",
    "href": "A2_Q5.html",
    "title": "Question 5",
    "section": "",
    "text": "library(parallel)\nlibrary(doParallel)\nlibrary(foreach)\nlibrary(iterators)\nlibrary(bench)  # Using bench instead of microbenchmark\n\n# Set seed for reproducibility\nset.seed(1234)\n\n# Number of cores for parallel processing\nnum_cores &lt;- detectCores() - 1\ncl &lt;- makeCluster(num_cores)\nregisterDoParallel(cl)\n\n# Define the function to generate random numbers and find max\nmax_finder &lt;- function(size) {\n  max(rnorm(size))\n}\n\n# Parameters\nn &lt;- 3   # Number of vectors\nsize &lt;- 5  # Length of each vector\n\n# Export variables to cluster\nclusterExport(cl, varlist = c(\"max_finder\", \"size\"))\n\n# Benchmark different methods\nbenchmark_results &lt;- bench::mark(\n  parLapply = {\n    parLapply(cl, 1:n, function(i) max_finder(size))\n  },\n  foreach = {\n    foreach(i = 1:n, .combine = c, .export = \"size\") %dopar% {\n      max_finder(size)\n    }\n  },\n  replicate = {\n    replicate(n, max_finder(size))\n  },\n  iterations = 100,  # Repeat for accuracy\n  check = FALSE  # Allow different results\n)\n\n# Stop the cluster\nstopCluster(cl)\n\n# Print results\nprint(benchmark_results)\n\n# A tibble: 3 × 13\n  expression     min  median `itr/sec` mem_alloc `gc/sec` n_itr  n_gc total_time\n  &lt;bch:expr&gt; &lt;bch:t&gt; &lt;bch:t&gt;     &lt;dbl&gt; &lt;bch:byt&gt;    &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt;   &lt;bch:tm&gt;\n1 parLapply    1.6ms  1.98ms      435.  593.02KB     4.40    99     1   227.53ms\n2 foreach     5.08ms   5.9ms      159.    1.46MB     6.61    96     4   605.54ms\n3 replicate   30.2µs 31.55µs    28095.    29.7KB     0      100     0     3.56ms\n# ℹ 4 more variables: result &lt;list&gt;, memory &lt;list&gt;, time &lt;list&gt;, gc &lt;list&gt;"
  },
  {
    "objectID": "A2_Q4.html",
    "href": "A2_Q4.html",
    "title": "Question 4",
    "section": "",
    "text": "library(foreach)\nlibrary(doParallel)\nlibrary(iterators)\n\n# Set up parallel backend\nnum_cores &lt;- detectCores() - 1  # Use one less than total cores\ncl &lt;- makeCluster(num_cores)\nregisterDoParallel(cl)\n\n# Set seed for reproducibility\nset.seed(1234)\n\n# Use foreach with the iter function\nmax_values &lt;- foreach(i = 1:3, .combine = c, .packages = \"iterators\") %dopar% {\n  vec &lt;- rnorm(5, mean = 0, sd = 1)  # Generate 5 random normal values\n  max(vec)  # Find the maximum in each vector\n}\n\n# Print the results\nprint(max_values)\n\n[1] 1.5398977 1.5799125 0.8096265\n\n# Stop the parallel cluster\nstopCluster(cl)"
  },
  {
    "objectID": "A2_Q3.html",
    "href": "A2_Q3.html",
    "title": "Question 3",
    "section": "",
    "text": "library(doParallel)\nlibrary(foreach)\n# Set a seed for reproducibility\nset.seed(123)\n\n# Parameters\nn &lt;- 50       # Sample size for each simulation\nB &lt;- 1000     # Number of bootstrap replications per simulation\nnsim &lt;- 1000  # Number of simulation iterations for coverage estimation\n\n# Create and register a cluster (using 3 cores in this example)\ncl &lt;- makeCluster(detectCores()-1)\nregisterDoParallel(cl)\n\nparallel_time &lt;- system.time({\n  # Use foreach in parallel to simulate nsim times\n  coverage_parallel &lt;- foreach(sim = 1:nsim, .combine = c) %dopar% {\n    # Draw a sample of size n from Exp(1)\n    sample_data &lt;- rexp(n, rate = 1)\n    \n    # Bootstrap the sample mean B times\n    boot_means &lt;- replicate(B, mean(sample(sample_data, size = n, replace = TRUE)))\n    \n    # Calculate the 95% percentile bootstrap CI\n    ci &lt;- quantile(boot_means, probs = c(0.025, 0.975))\n    \n    # Return 1 if the true mean (1) is within the CI, else 0\n    as.numeric(1 &gt;= ci[1] & 1 &lt;= ci[2])\n  }\n})\n# Estimate the coverage probability\ncoverage_prob_parallel &lt;- mean(coverage_parallel)\n\n# Stop the cluster after parallel processing is complete\nstopCluster(cl)\n\n\n## Results\ncat(\"Parallel processing time:\\n\")\n\nParallel processing time:\n\nprint(parallel_time)\n\n   user  system elapsed \n   0.43    0.16    6.65 \n\ncat(\"Estimated coverage (parallel):\", coverage_prob_parallel, \"\\n\\n\")\n\nEstimated coverage (parallel): 0.925"
  }
]