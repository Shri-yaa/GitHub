---
title: "Practical 1"
format: html
toc: true  # Adds a Table of Contents
toc-depth: 2
number-sections: true
code-fold: true  # Collapsible code blocks
---

# 📌 **Introduction**

This report explores the built-in R ***airquality*** and ***cars*** datasets.

We will:\
🎯Identify missing values

🎯Compute summary statistics

🎯Perform a linear regression using matrix calculations and verify the results

# ✅ **Looking at Missing Values**

```{r}
# Load the airquality dataset 
data("airquality")

# 🔎 Find rows with missing values
missing_rows <- airquality[!complete.cases(airquality), ]

# Display the rows with missing values
cat("The rows in the airquality dataset with missing values are shown below:")
print(missing_rows)
```

# 📊 **Summary Statistics for Temperature & Ozone**

```{r}
# Function to find sd, mean, min, max

sumstats <- function(x) {
  stats <- data.frame(
    StdDev = sd(x, na.rm = TRUE), # ignoring missing values
    Mean = mean(x, na.rm = TRUE),
    Min = min(x, na.rm = TRUE),
    Max = max(x, na.rm = TRUE)
  )
  return(stats)
}

cat("The summary stats for Ozone level are as follows:")
print(sumstats(airquality$Ozone))
cat("The summary stats for Temp are as follows:")
print(sumstats(airquality$Temp))
```

# 📐 **Linear Regression using Matrix Calculations**

```{r}
# Load the built-in cars dataset
data("cars")

# Define response (Y) and predictor (X) variables
y <- cars$dist
x <- cbind(1, cars$speed)  # Design matrix (adding intercept column of 1s)

# Compute the estimated beta parameters using the formula: beta = (X'X)^(-1) * X'Y
  beta_hat <- solve(t(x) %*% x) %*% t(x) %*% y

# Create a function to find the required estimates

estimates <- function() {
  
  # Compute the residuals
  residuals <- y - x %*% beta_hat
  
  # Compute the standard error of the regression: SE = sqrt(sigma^2 * (X'X)^(-1))
  sigma_squared <- sum(residuals^2) / (length(y) - ncol(x))  # MSE
  se_beta_hat <- sqrt(sigma_squared * diag(solve(t(x) %*% x)))  # Standard errors
  
  # Compute the t-statistics for each beta
  t_stat <- beta_hat / se_beta_hat
  
  # Compute the p-values based on the t-statistics and degrees of freedom
  df <- length(y) - ncol(x)
  p_values <- 2 * pt(-abs(t_stat), df)
  
  # Return the results in a list
  results <- list(
    beta_estimates = beta_hat,
    standard_errors = se_beta_hat,
    t_statistics = t_stat,
    p_values = p_values
  )
  
  return(results)
}

model_results <- estimates()
cat("Here are some estimates found using matrix calculations")
print(model_results)
```

# 📊 Using `lm()` for Verification of Calculations

```{r}
# Check computed estimates against lm function output
model1 <- lm(dist~speed, data=cars)
cat("Here are the LM function estimates:")
summary(model1)

# Display results
cat("And here are the Matrix Calculation Estimates from before:")
print(beta_hat)

```

## Conclusion

🎉 The calculated estimates match the output of the fitted lm regression!
